
OpusProfilingTool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001168  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001360  08001360  00011360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013c8  080013c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080013c8  080013c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013c8  080013c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080013c8  080013c8  000113c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080013d0  080013d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080013d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  080013e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00028000  20000030  080013e8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_line   00006c13  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000093cb  00000000  00000000  00026c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001ac0  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000620  00000000  00000000  00031ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ff62e  00000000  00000000  00032108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000968  00000000  00000000  00131738  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00002c3a  00000000  00000000  001320a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00027c47  00000000  00000000  00134cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0015c921  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ec4  00000000  00000000  0015c99c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08001348 	.word	0x08001348

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08001348 	.word	0x08001348

08000238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000270 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800023c:	f000 f8ce 	bl	80003dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000240:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000242:	e003      	b.n	800024c <LoopCopyDataInit>

08000244 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000246:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000248:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800024a:	3104      	adds	r1, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800024c:	480a      	ldr	r0, [pc, #40]	; (8000278 <LoopForever+0xa>)
	ldr	r3, =_edata
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000250:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000252:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000254:	d3f6      	bcc.n	8000244 <CopyDataInit>
	ldr	r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000258:	e002      	b.n	8000260 <LoopFillZerobss>

0800025a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800025a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800025c:	f842 3b04 	str.w	r3, [r2], #4

08000260 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <LoopForever+0x16>)
	cmp	r2, r3
 8000262:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000264:	d3f9      	bcc.n	800025a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000266:	f001 f843 	bl	80012f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800026a:	f000 f80f 	bl	800028c <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000270:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000274:	080013d8 	.word	0x080013d8
	ldr	r0, =_sdata
 8000278:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800027c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000280:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000284:	20000030 	.word	0x20000030

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <main>:



//uint32_t led_toggle_count = 0;//commented out by Pritom
int main(void)
{
 800028c:	b500      	push	{lr}
 800028e:	b099      	sub	sp, #100	; 0x64
   *    timer for example or other time source), keeping in mind that Time base
   *    duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
   *    handled in milliseconds basis.
   *  - Low Level Initialization
   */
  HAL_Init();
 8000290:	f000 f920 	bl	80004d4 <HAL_Init>
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000294:	a806      	add	r0, sp, #24
 8000296:	2248      	movs	r2, #72	; 0x48
 8000298:	2100      	movs	r1, #0
 800029a:	f001 f84d 	bl	8001338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80002a0:	4618      	mov	r0, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80002a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80002aa:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80002ac:	f000 fa96 	bl	80007dc <HAL_PWREx_ControlVoltageScaling>
 80002b0:	b100      	cbz	r0, 80002b4 <main+0x28>
 80002b2:	e7fe      	b.n	80002b2 <main+0x26>
    while(1);
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 55;
 80002b6:	2137      	movs	r1, #55	; 0x37
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002b8:	2207      	movs	r2, #7
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	f44f 7680 	mov.w	r6, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002c0:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ca:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	e9cd 6509 	strd	r6, r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 55;
 80002d2:	e9cd 4113 	strd	r4, r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002d6:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f000 fb22 	bl	8000920 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	b100      	cbz	r0, 80002e2 <main+0x56>
 80002e0:	e7fe      	b.n	80002e0 <main+0x54>
  {
    while(1);
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	240f      	movs	r4, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2203      	movs	r2, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002e6:	a801      	add	r0, sp, #4
 80002e8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	e9cd 4201 	strd	r4, r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002f4:	f000 fee2 	bl	80010bc <HAL_RCC_ClockConfig>
 80002f8:	b100      	cbz	r0, 80002fc <main+0x70>
 80002fa:	e7fe      	b.n	80002fa <main+0x6e>
static void ICACHE_Init(void)
{

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80002fc:	f000 fa4a 	bl	8000794 <HAL_ICACHE_ConfigAssociativityMode>
 8000300:	b100      	cbz	r0, 8000304 <main+0x78>
 8000302:	e7fe      	b.n	8000302 <main+0x76>
  {
    while(1);
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000304:	f000 fa58 	bl	80007b8 <HAL_ICACHE_Enable>
 8000308:	b100      	cbz	r0, 800030c <main+0x80>
 800030a:	e7fe      	b.n	800030a <main+0x7e>
  BSP_LED_Init(LED1);
 800030c:	f000 f826 	bl	800035c <BSP_LED_Init>
 8000310:	e7fe      	b.n	8000310 <main+0x84>
 8000312:	bf00      	nop

08000314 <HAL_MspInit>:
  }
}

void HAL_MspInit(void)
{
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000314:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <HAL_MspInit+0x30>)
{
 8000316:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000318:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800031a:	f042 0201 	orr.w	r2, r2, #1
 800031e:	661a      	str	r2, [r3, #96]	; 0x60
 8000320:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000322:	f002 0201 	and.w	r2, r2, #1
 8000326:	9200      	str	r2, [sp, #0]
 8000328:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800032c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000330:	659a      	str	r2, [r3, #88]	; 0x58
 8000332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	9b01      	ldr	r3, [sp, #4]


  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
}
 800033c:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 800033e:	f000 ba91 	b.w	8000864 <HAL_PWREx_DisableUCPDDeadBattery>
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <NMI_Handler>:
* @param  None
* @retval None
*/
void NMI_Handler(void)
{
}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop

0800034c <HardFault_Handler>:
* @brief  HardFault_Handler This function handles Hard Fault exception.
* @param  None
* @retval None
*/
void HardFault_Handler(void)
{
 800034c:	e7fe      	b.n	800034c <HardFault_Handler>
 800034e:	bf00      	nop

08000350 <SVC_Handler>:
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop

08000354 <DebugMon_Handler>:
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop

08000358 <PendSV_Handler>:
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800035c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
  {
    LED1_GPIO_CLK_ENABLE();
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <BSP_LED_Init+0x74>)
{
 8000360:	b089      	sub	sp, #36	; 0x24
    LED1_GPIO_CLK_ENABLE();
 8000362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  if (Led == LED1)
 8000364:	b308      	cbz	r0, 80003aa <BSP_LED_Init+0x4e>
  }
  else if (Led == LED2)
 8000366:	2801      	cmp	r0, #1
 8000368:	d028      	beq.n	80003bc <BSP_LED_Init+0x60>
  {
    LED2_GPIO_CLK_ENABLE();
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 800036a:	f042 0201 	orr.w	r2, r2, #1
 800036e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	9302      	str	r3, [sp, #8]
 8000378:	9b02      	ldr	r3, [sp, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
  GPIO_Init.Pull  = GPIO_PULLUP;
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800037c:	2203      	movs	r2, #3
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 800037e:	4c15      	ldr	r4, [pc, #84]	; (80003d4 <BSP_LED_Init+0x78>)
  GPIO_Init.Pin   = LED_PIN[Led];
 8000380:	4915      	ldr	r1, [pc, #84]	; (80003d8 <BSP_LED_Init+0x7c>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000382:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
  GPIO_Init.Pin   = LED_PIN[Led];
 8000386:	f831 5010 	ldrh.w	r5, [r1, r0, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 800038a:	4620      	mov	r0, r4
 800038c:	a903      	add	r1, sp, #12
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800038e:	e9cd 3205 	strd	r3, r2, [sp, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000392:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000396:	f000 f919 	bl	80005cc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800039a:	4620      	mov	r0, r4
 800039c:	4629      	mov	r1, r5
 800039e:	2200      	movs	r2, #0
 80003a0:	f000 f9f2 	bl	8000788 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80003a4:	2000      	movs	r0, #0
 80003a6:	b009      	add	sp, #36	; 0x24
 80003a8:	bd30      	pop	{r4, r5, pc}
    LED1_GPIO_CLK_ENABLE();
 80003aa:	f042 0204 	orr.w	r2, r2, #4
 80003ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	9b00      	ldr	r3, [sp, #0]
 80003ba:	e7de      	b.n	800037a <BSP_LED_Init+0x1e>
    LED2_GPIO_CLK_ENABLE();
 80003bc:	f042 0202 	orr.w	r2, r2, #2
 80003c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80003c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	9b01      	ldr	r3, [sp, #4]
 80003cc:	e7d5      	b.n	800037a <BSP_LED_Init+0x1e>
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	08001368 	.word	0x08001368
 80003d8:	08001360 	.word	0x08001360

080003dc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <SystemInit+0x10>)
 80003de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80003e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003ea:	4770      	bx	lr
 80003ec:	e000ed00 	.word	0xe000ed00

080003f0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <SystemCoreClockUpdate+0x84>)
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80003f2:	4920      	ldr	r1, [pc, #128]	; (8000474 <SystemCoreClockUpdate+0x84>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80003f4:	681a      	ldr	r2, [r3, #0]
  msirange = MSIRangeTable[msirange];
 80003f6:	4820      	ldr	r0, [pc, #128]	; (8000478 <SystemCoreClockUpdate+0x88>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80003f8:	0712      	lsls	r2, r2, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80003fa:	bf54      	ite	pl
 80003fc:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000400:	681b      	ldrmi	r3, [r3, #0]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000402:	688a      	ldr	r2, [r1, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000404:	bf58      	it	pl
 8000406:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800040a:	f002 020c 	and.w	r2, r2, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800040e:	bf48      	it	mi
 8000410:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000414:	2a08      	cmp	r2, #8
  msirange = MSIRangeTable[msirange];
 8000416:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800041a:	d00d      	beq.n	8000438 <SystemCoreClockUpdate+0x48>
 800041c:	2a0c      	cmp	r2, #12
 800041e:	d00d      	beq.n	800043c <SystemCoreClockUpdate+0x4c>
 8000420:	2a04      	cmp	r2, #4
 8000422:	d009      	beq.n	8000438 <SystemCoreClockUpdate+0x48>
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <SystemCoreClockUpdate+0x84>)
 8000426:	4815      	ldr	r0, [pc, #84]	; (800047c <SystemCoreClockUpdate+0x8c>)
 8000428:	6892      	ldr	r2, [r2, #8]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800042a:	4915      	ldr	r1, [pc, #84]	; (8000480 <SystemCoreClockUpdate+0x90>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800042c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000430:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8000432:	40d3      	lsrs	r3, r2
 8000434:	600b      	str	r3, [r1, #0]
}
 8000436:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemCoreClockUpdate+0x94>)
 800043a:	e7f3      	b.n	8000424 <SystemCoreClockUpdate+0x34>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800043c:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800043e:	68ca      	ldr	r2, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000440:	f000 0103 	and.w	r1, r0, #3
      switch (pllsource)
 8000444:	3902      	subs	r1, #2
 8000446:	2901      	cmp	r1, #1
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000448:	f3c2 1203 	ubfx	r2, r2, #4, #4
          pllvco = (HSE_VALUE / pllm);
 800044c:	bf98      	it	ls
 800044e:	4b0d      	ldrls	r3, [pc, #52]	; (8000484 <SystemCoreClockUpdate+0x94>)
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000450:	3201      	adds	r2, #1
          pllvco = (msirange / pllm);
 8000452:	fbb3 f3f2 	udiv	r3, r3, r2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000456:	4907      	ldr	r1, [pc, #28]	; (8000474 <SystemCoreClockUpdate+0x84>)
 8000458:	68ca      	ldr	r2, [r1, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800045a:	68c9      	ldr	r1, [r1, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800045c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000460:	fb03 f202 	mul.w	r2, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000464:	f3c1 6341 	ubfx	r3, r1, #25, #2
 8000468:	3301      	adds	r3, #1
 800046a:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllr;
 800046c:	fbb2 f3f3 	udiv	r3, r2, r3
      break;
 8000470:	e7d8      	b.n	8000424 <SystemCoreClockUpdate+0x34>
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	08001384 	.word	0x08001384
 800047c:	08001374 	.word	0x08001374
 8000480:	20000000 	.word	0x20000000
 8000484:	00f42400 	.word	0x00f42400

08000488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000488:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x40>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	b90b      	cbnz	r3, 8000494 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000490:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000492:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000498:	fbb2 f3f3 	udiv	r3, r2, r3
 800049c:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <HAL_InitTick+0x44>)
 800049e:	4605      	mov	r5, r0
 80004a0:	6810      	ldr	r0, [r2, #0]
 80004a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80004a6:	f000 f879 	bl	800059c <HAL_SYSTICK_Config>
 80004aa:	4604      	mov	r4, r0
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d1ef      	bne.n	8000490 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004b0:	2d07      	cmp	r5, #7
 80004b2:	d8ed      	bhi.n	8000490 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b4:	4602      	mov	r2, r0
 80004b6:	4629      	mov	r1, r5
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f000 f838 	bl	8000530 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <HAL_InitTick+0x48>)
 80004c2:	4620      	mov	r0, r4
 80004c4:	601d      	str	r5, [r3, #0]
}
 80004c6:	bd38      	pop	{r3, r4, r5, pc}
 80004c8:	20000004 	.word	0x20000004
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000008 	.word	0x20000008

080004d4 <HAL_Init>:
{
 80004d4:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80004d6:	2004      	movs	r0, #4
{
 80004d8:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80004da:	f000 f817 	bl	800050c <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 80004de:	f7ff ff87 	bl	80003f0 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff ffd0 	bl	8000488 <HAL_InitTick>
 80004e8:	b118      	cbz	r0, 80004f2 <HAL_Init+0x1e>
    status = HAL_ERROR;
 80004ea:	2001      	movs	r0, #1
}
 80004ec:	b003      	add	sp, #12
 80004ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80004f2:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 80004f4:	f7ff ff0e 	bl	8000314 <HAL_MspInit>
 80004f8:	9801      	ldr	r0, [sp, #4]
}
 80004fa:	b003      	add	sp, #12
 80004fc:	f85d fb04 	ldr.w	pc, [sp], #4

08000500 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000500:	4b01      	ldr	r3, [pc, #4]	; (8000508 <HAL_GetTick+0x8>)
 8000502:	6818      	ldr	r0, [r3, #0]
}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c

0800050c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priority group */
 8000512:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000514:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priority group */
 8000516:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800051a:	400b      	ands	r3, r1
 800051c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000524:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000526:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000532:	b430      	push	{r4, r5}
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800053a:	f1c3 0507 	rsb	r5, r3, #7
 800053e:	2d03      	cmp	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000540:	f103 0403 	add.w	r4, r3, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000544:	bf28      	it	cs
 8000546:	2503      	movcs	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000548:	2c06      	cmp	r4, #6
 800054a:	d919      	bls.n	8000580 <HAL_NVIC_SetPriority+0x50>
 800054c:	f04f 34ff 	mov.w	r4, #4294967295
 8000550:	3b04      	subs	r3, #4
 8000552:	409c      	lsls	r4, r3
 8000554:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	f04f 32ff 	mov.w	r2, #4294967295
 800055c:	40aa      	lsls	r2, r5
 800055e:	ea21 0102 	bic.w	r1, r1, r2
 8000562:	fa01 f203 	lsl.w	r2, r1, r3
 8000566:	4322      	orrs	r2, r4
 8000568:	0152      	lsls	r2, r2, #5
  if ((int32_t)(IRQn) >= 0)
 800056a:	2800      	cmp	r0, #0
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	db0a      	blt.n	8000586 <HAL_NVIC_SetPriority+0x56>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000570:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000574:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000578:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800057c:	bc30      	pop	{r4, r5}
 800057e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	2400      	movs	r4, #0
 8000582:	4623      	mov	r3, r4
 8000584:	e7e8      	b.n	8000558 <HAL_NVIC_SetPriority+0x28>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_NVIC_SetPriority+0x68>)
 8000588:	f000 000f 	and.w	r0, r0, #15
 800058c:	4403      	add	r3, r0
 800058e:	761a      	strb	r2, [r3, #24]
 8000590:	bc30      	pop	{r4, r5}
 8000592:	4770      	bx	lr
 8000594:	e000ed00 	.word	0xe000ed00
 8000598:	e000ecfc 	.word	0xe000ecfc

0800059c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800059c:	3801      	subs	r0, #1
 800059e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005a2:	d20d      	bcs.n	80005c0 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005a4:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	25e0      	movs	r5, #224	; 0xe0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005aa:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_SYSTICK_Config+0x28>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ae:	4c06      	ldr	r4, [pc, #24]	; (80005c8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b0:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005b6:	4610      	mov	r0, r2
  return SysTick_Config(TicksNumb);
}
 80005b8:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ba:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005bc:	6019      	str	r1, [r3, #0]
 80005be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005c0:	2001      	movs	r0, #1
 80005c2:	4770      	bx	lr
 80005c4:	e000e010 	.word	0xe000e010
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80005d0:	f8d1 e000 	ldr.w	lr, [r1]
 80005d4:	f1be 0f00 	cmp.w	lr, #0
 80005d8:	d077      	beq.n	80006ca <HAL_GPIO_Init+0xfe>
 80005da:	4688      	mov	r8, r1
  uint32_t position = 0U;
 80005dc:	2600      	movs	r6, #0
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80005de:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8000784 <HAL_GPIO_Init+0x1b8>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80005e2:	2301      	movs	r3, #1
 80005e4:	fa03 fc06 	lsl.w	ip, r3, r6
    if(iocurrent != 0U)
 80005e8:	ea1c 050e 	ands.w	r5, ip, lr
 80005ec:	d069      	beq.n	80006c2 <HAL_GPIO_Init+0xf6>
 80005ee:	2303      	movs	r3, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80005f4:	0077      	lsls	r7, r6, #1
 80005f6:	f021 0a10 	bic.w	sl, r1, #16
 80005fa:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80005fe:	f10a 34ff 	add.w	r4, sl, #4294967295
 8000602:	40bb      	lsls	r3, r7
 8000604:	2c01      	cmp	r4, #1
 8000606:	ea6f 0303 	mvn.w	r3, r3
 800060a:	fa02 f207 	lsl.w	r2, r2, r7
 800060e:	d95e      	bls.n	80006ce <HAL_GPIO_Init+0x102>
      temp = GPIOx->PUPDR;
 8000610:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000612:	401c      	ands	r4, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000614:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8000616:	60c2      	str	r2, [r0, #12]
      temp = GPIOx->MODER;
 8000618:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800061a:	f001 0203 	and.w	r2, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800061e:	401c      	ands	r4, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000620:	4613      	mov	r3, r2
 8000622:	40bb      	lsls	r3, r7
 8000624:	4323      	orrs	r3, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000626:	00cf      	lsls	r7, r1, #3
      GPIOx->MODER = temp;
 8000628:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800062a:	d54a      	bpl.n	80006c2 <HAL_GPIO_Init+0xf6>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800062c:	220f      	movs	r2, #15
 800062e:	f026 0403 	bic.w	r4, r6, #3
 8000632:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000636:	f504 343d 	add.w	r4, r4, #193536	; 0x2f400
 800063a:	f006 0303 	and.w	r3, r6, #3
        temp = EXTI->EXTICR[position >> 2U];
 800063e:	6e27      	ldr	r7, [r4, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	409a      	lsls	r2, r3
 8000644:	ea27 0202 	bic.w	r2, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000648:	4f48      	ldr	r7, [pc, #288]	; (800076c <HAL_GPIO_Init+0x1a0>)
 800064a:	42b8      	cmp	r0, r7
 800064c:	d017      	beq.n	800067e <HAL_GPIO_Init+0xb2>
 800064e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000652:	42b8      	cmp	r0, r7
 8000654:	d075      	beq.n	8000742 <HAL_GPIO_Init+0x176>
 8000656:	4f46      	ldr	r7, [pc, #280]	; (8000770 <HAL_GPIO_Init+0x1a4>)
 8000658:	42b8      	cmp	r0, r7
 800065a:	d06d      	beq.n	8000738 <HAL_GPIO_Init+0x16c>
 800065c:	4f45      	ldr	r7, [pc, #276]	; (8000774 <HAL_GPIO_Init+0x1a8>)
 800065e:	42b8      	cmp	r0, r7
 8000660:	d079      	beq.n	8000756 <HAL_GPIO_Init+0x18a>
 8000662:	4f45      	ldr	r7, [pc, #276]	; (8000778 <HAL_GPIO_Init+0x1ac>)
 8000664:	42b8      	cmp	r0, r7
 8000666:	d07b      	beq.n	8000760 <HAL_GPIO_Init+0x194>
 8000668:	4f44      	ldr	r7, [pc, #272]	; (800077c <HAL_GPIO_Init+0x1b0>)
 800066a:	42b8      	cmp	r0, r7
 800066c:	d06e      	beq.n	800074c <HAL_GPIO_Init+0x180>
 800066e:	4f44      	ldr	r7, [pc, #272]	; (8000780 <HAL_GPIO_Init+0x1b4>)
 8000670:	42b8      	cmp	r0, r7
 8000672:	bf0c      	ite	eq
 8000674:	2706      	moveq	r7, #6
 8000676:	2707      	movne	r7, #7
 8000678:	fa07 f303 	lsl.w	r3, r7, r3
 800067c:	431a      	orrs	r2, r3
        EXTI->EXTICR[position >> 2U] = temp;
 800067e:	6622      	str	r2, [r4, #96]	; 0x60
        temp &= ~(iocurrent);
 8000680:	43ea      	mvns	r2, r5
        temp = EXTI->IMR1;
 8000682:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000686:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 8000688:	bf54      	ite	pl
 800068a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800068c:	432b      	orrmi	r3, r5
        }
        EXTI->IMR1 = temp;
 800068e:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80

        temp = EXTI->EMR1;
 8000692:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000696:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8000698:	bf54      	ite	pl
 800069a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800069c:	432b      	orrmi	r3, r5
        }
        EXTI->EMR1 = temp;
 800069e:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80006a2:	f8d9 3000 	ldr.w	r3, [r9]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006a6:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 80006a8:	bf54      	ite	pl
 80006aa:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80006ac:	432b      	orrmi	r3, r5
        }
        EXTI->RTSR1 = temp;
 80006ae:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
 80006b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b6:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 80006b8:	bf54      	ite	pl
 80006ba:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80006bc:	432b      	orrmi	r3, r5
        }
        EXTI->FTSR1 = temp;
 80006be:	f8c9 3004 	str.w	r3, [r9, #4]
      }
    }

    position++;
 80006c2:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80006c4:	fa3e f306 	lsrs.w	r3, lr, r6
 80006c8:	d18b      	bne.n	80005e2 <HAL_GPIO_Init+0x16>
  }
}
 80006ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80006ce:	6884      	ldr	r4, [r0, #8]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006d0:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80006d4:	ea04 0b03 	and.w	fp, r4, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006d8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80006dc:	fa04 f407 	lsl.w	r4, r4, r7
 80006e0:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 80006e4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e6:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006ea:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006ee:	ea2b 0c0c 	bic.w	ip, fp, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006f2:	fa04 f406 	lsl.w	r4, r4, r6
 80006f6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80006fa:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80006fc:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80006fe:	ea04 0403 	and.w	r4, r4, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000702:	ea42 0204 	orr.w	r2, r2, r4
      GPIOx->PUPDR = temp;
 8000706:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000708:	d186      	bne.n	8000618 <HAL_GPIO_Init+0x4c>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800070a:	f04f 0b0f 	mov.w	fp, #15
        temp = GPIOx->AFR[position >> 3U];
 800070e:	ea4f 0cd6 	mov.w	ip, r6, lsr #3
 8000712:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000716:	f006 0407 	and.w	r4, r6, #7
        temp = GPIOx->AFR[position >> 3U];
 800071a:	f8dc 2020 	ldr.w	r2, [ip, #32]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800071e:	00a4      	lsls	r4, r4, #2
 8000720:	fa0b fb04 	lsl.w	fp, fp, r4
 8000724:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000728:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800072c:	40a2      	lsls	r2, r4
 800072e:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000732:	f8cc 2020 	str.w	r2, [ip, #32]
 8000736:	e76f      	b.n	8000618 <HAL_GPIO_Init+0x4c>
 8000738:	2702      	movs	r7, #2
 800073a:	fa07 f303 	lsl.w	r3, r7, r3
 800073e:	431a      	orrs	r2, r3
 8000740:	e79d      	b.n	800067e <HAL_GPIO_Init+0xb2>
 8000742:	2701      	movs	r7, #1
 8000744:	fa07 f303 	lsl.w	r3, r7, r3
 8000748:	431a      	orrs	r2, r3
 800074a:	e798      	b.n	800067e <HAL_GPIO_Init+0xb2>
 800074c:	2705      	movs	r7, #5
 800074e:	fa07 f303 	lsl.w	r3, r7, r3
 8000752:	431a      	orrs	r2, r3
 8000754:	e793      	b.n	800067e <HAL_GPIO_Init+0xb2>
 8000756:	2703      	movs	r7, #3
 8000758:	fa07 f303 	lsl.w	r3, r7, r3
 800075c:	431a      	orrs	r2, r3
 800075e:	e78e      	b.n	800067e <HAL_GPIO_Init+0xb2>
 8000760:	2704      	movs	r7, #4
 8000762:	fa07 f303 	lsl.w	r3, r7, r3
 8000766:	431a      	orrs	r2, r3
 8000768:	e789      	b.n	800067e <HAL_GPIO_Init+0xb2>
 800076a:	bf00      	nop
 800076c:	42020000 	.word	0x42020000
 8000770:	42020800 	.word	0x42020800
 8000774:	42020c00 	.word	0x42020c00
 8000778:	42021000 	.word	0x42021000
 800077c:	42021400 	.word	0x42021400
 8000780:	42021800 	.word	0x42021800
 8000784:	4002f400 	.word	0x4002f400

08000788 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000788:	b90a      	cbnz	r2, 800078e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800078a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800078c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800078e:	6181      	str	r1, [r0, #24]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <HAL_ICACHE_ConfigAssociativityMode>:

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <HAL_ICACHE_ConfigAssociativityMode+0x20>)
 8000796:	680b      	ldr	r3, [r1, #0]
 8000798:	f013 0301 	ands.w	r3, r3, #1
 800079c:	d106      	bne.n	80007ac <HAL_ICACHE_ConfigAssociativityMode+0x18>
  {
    status = HAL_ERROR;
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800079e:	680a      	ldr	r2, [r1, #0]
 80007a0:	f022 0204 	bic.w	r2, r2, #4
 80007a4:	4310      	orrs	r0, r2
 80007a6:	6008      	str	r0, [r1, #0]
  }

  return status;
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	4770      	bx	lr
    status = HAL_ERROR;
 80007ac:	2301      	movs	r3, #1
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40030400 	.word	0x40030400

080007b8 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 80007ba:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80007bc:	6813      	ldr	r3, [r2, #0]
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40030400 	.word	0x40030400

080007cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_PWREx_GetVoltageRange+0xc>)
 80007ce:	6818      	ldr	r0, [r3, #0]
}
 80007d0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40007000 	.word	0x40007000

080007dc <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80007dc:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80007de:	6813      	ldr	r3, [r2, #0]
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80007e0:	6911      	ldr	r1, [r2, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80007e2:	f411 4f10 	tst.w	r1, #36864	; 0x9000
 80007e6:	d02e      	beq.n	8000846 <HAL_PWREx_ControlVoltageScaling+0x6a>
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80007e8:	68d1      	ldr	r1, [r2, #12]
 80007ea:	0409      	lsls	r1, r1, #16
 80007ec:	d42b      	bmi.n	8000846 <HAL_PWREx_ControlVoltageScaling+0x6a>
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80007ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (vos_old == VoltageScaling)
 80007f2:	4283      	cmp	r3, r0
 80007f4:	d02b      	beq.n	800084e <HAL_PWREx_ControlVoltageScaling+0x72>
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80007f6:	2332      	movs	r3, #50	; 0x32
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80007f8:	6811      	ldr	r1, [r2, #0]
{
 80007fa:	b410      	push	{r4}
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80007fc:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8000800:	4308      	orrs	r0, r1
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000802:	4c15      	ldr	r4, [pc, #84]	; (8000858 <HAL_PWREx_ControlVoltageScaling+0x7c>)
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000804:	6010      	str	r0, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000806:	6821      	ldr	r1, [r4, #0]
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <HAL_PWREx_ControlVoltageScaling+0x80>)
 800080a:	0949      	lsrs	r1, r1, #5
 800080c:	fba0 0101 	umull	r0, r1, r0, r1
 8000810:	09c9      	lsrs	r1, r1, #7
 8000812:	fb03 f301 	mul.w	r3, r3, r1
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <HAL_PWREx_ControlVoltageScaling+0x84>)
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000818:	6951      	ldr	r1, [r2, #20]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800081a:	fba0 0303 	umull	r0, r3, r0, r3
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800081e:	0548      	lsls	r0, r1, #21
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000820:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000824:	f103 0301 	add.w	r3, r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000828:	d505      	bpl.n	8000836 <HAL_PWREx_ControlVoltageScaling+0x5a>
 800082a:	e000      	b.n	800082e <HAL_PWREx_ControlVoltageScaling+0x52>
 800082c:	b11b      	cbz	r3, 8000836 <HAL_PWREx_ControlVoltageScaling+0x5a>
 800082e:	6951      	ldr	r1, [r2, #20]
    wait_loop_index--;
 8000830:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000832:	0549      	lsls	r1, r1, #21
 8000834:	d4fa      	bmi.n	800082c <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	055b      	lsls	r3, r3, #21
 800083c:	d405      	bmi.n	800084a <HAL_PWREx_ControlVoltageScaling+0x6e>
  return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000844:	4770      	bx	lr
    return HAL_ERROR;
 8000846:	2001      	movs	r0, #1
 8000848:	4770      	bx	lr
    return HAL_TIMEOUT;
 800084a:	2003      	movs	r0, #3
 800084c:	e7f8      	b.n	8000840 <HAL_PWREx_ControlVoltageScaling+0x64>
  return HAL_OK;
 800084e:	2000      	movs	r0, #0
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40007000 	.word	0x40007000
 8000858:	20000000 	.word	0x20000000
 800085c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000860:	cccccccd 	.word	0xcccccccd

08000864 <HAL_PWREx_DisableUCPDDeadBattery>:
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000864:	4a02      	ldr	r2, [pc, #8]	; (8000870 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8000866:	6893      	ldr	r3, [r2, #8]
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6093      	str	r3, [r2, #8]
}
 800086e:	4770      	bx	lr
 8000870:	40007000 	.word	0x40007000

08000874 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000876:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000878:	68d2      	ldr	r2, [r2, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800087a:	f013 030c 	ands.w	r3, r3, #12
 800087e:	d008      	beq.n	8000892 <HAL_RCC_GetSysClockFreq+0x1e>
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d038      	beq.n	80008f6 <HAL_RCC_GetSysClockFreq+0x82>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000884:	2b04      	cmp	r3, #4
 8000886:	4824      	ldr	r0, [pc, #144]	; (8000918 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000888:	d03b      	beq.n	8000902 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800088a:	2b08      	cmp	r3, #8
 800088c:	bf18      	it	ne
 800088e:	2000      	movne	r0, #0
 8000890:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000892:	4a20      	ldr	r2, [pc, #128]	; (8000914 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000894:	6811      	ldr	r1, [r2, #0]
 8000896:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000898:	bf54      	ite	pl
 800089a:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800089e:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80008a0:	491e      	ldr	r1, [pc, #120]	; (800091c <HAL_RCC_GetSysClockFreq+0xa8>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80008a2:	bf54      	ite	pl
 80008a4:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80008a8:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80008ac:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80008b0:	b303      	cbz	r3, 80008f4 <HAL_RCC_GetSysClockFreq+0x80>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008b2:	2b0c      	cmp	r3, #12
 80008b4:	d11d      	bne.n	80008f2 <HAL_RCC_GetSysClockFreq+0x7e>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008b6:	4917      	ldr	r1, [pc, #92]	; (8000914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80008b8:	68ca      	ldr	r2, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80008ba:	68cb      	ldr	r3, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008bc:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80008c0:	f3c3 1303 	ubfx	r3, r3, #4, #4

    switch (pllsource)
 80008c4:	2a02      	cmp	r2, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80008c6:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 80008ca:	d001      	beq.n	80008d0 <HAL_RCC_GetSysClockFreq+0x5c>
 80008cc:	2a03      	cmp	r2, #3
 80008ce:	d119      	bne.n	8000904 <HAL_RCC_GetSysClockFreq+0x90>
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
        break;

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80008d2:	68ca      	ldr	r2, [r1, #12]
 80008d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80008d8:	f3c2 2306 	ubfx	r3, r2, #8, #7
 80008dc:	fb00 f003 	mul.w	r0, r0, r3
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80008e8:	3301      	adds	r3, #1
 80008ea:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80008ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80008f0:	4770      	bx	lr
 80008f2:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80008f4:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008f6:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d0c9      	beq.n	8000892 <HAL_RCC_GetSysClockFreq+0x1e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80008fe:	2000      	movs	r0, #0
 8000900:	e7d9      	b.n	80008b6 <HAL_RCC_GetSysClockFreq+0x42>
 8000902:	4770      	bx	lr
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000904:	fbb0 f0f3 	udiv	r0, r0, r3
 8000908:	68cb      	ldr	r3, [r1, #12]
 800090a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800090e:	fb00 f003 	mul.w	r0, r0, r3
        break;
 8000912:	e7e5      	b.n	80008e0 <HAL_RCC_GetSysClockFreq+0x6c>
 8000914:	40021000 	.word	0x40021000
 8000918:	00f42400 	.word	0x00f42400
 800091c:	08001384 	.word	0x08001384

08000920 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000920:	2800      	cmp	r0, #0
 8000922:	f000 81e2 	beq.w	8000cea <HAL_RCC_OscConfig+0x3ca>
{
 8000926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800092a:	4aaf      	ldr	r2, [pc, #700]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800092c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800092e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000930:	68d6      	ldr	r6, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000932:	06da      	lsls	r2, r3, #27
{
 8000934:	b084      	sub	sp, #16
 8000936:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000938:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800093c:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000940:	d52f      	bpl.n	80009a2 <HAL_RCC_OscConfig+0x82>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000942:	2d00      	cmp	r5, #0
 8000944:	f000 8157 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x2d6>
 8000948:	2d0c      	cmp	r5, #12
 800094a:	f000 8151 	beq.w	8000bf0 <HAL_RCC_OscConfig+0x2d0>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800094e:	69e3      	ldr	r3, [r4, #28]
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 81b4 	beq.w	8000cbe <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_MSI_ENABLE();
 8000956:	4ba4      	ldr	r3, [pc, #656]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000958:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800095a:	461f      	mov	r7, r3
        __HAL_RCC_MSI_ENABLE();
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000962:	f7ff fdcd 	bl	8000500 <HAL_GetTick>
 8000966:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000968:	e006      	b.n	8000978 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800096a:	f7ff fdc9 	bl	8000500 <HAL_GetTick>
 800096e:	eba0 0008 	sub.w	r0, r0, r8
 8000972:	2802      	cmp	r0, #2
 8000974:	f200 81b5 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	079a      	lsls	r2, r3, #30
 800097c:	d5f5      	bpl.n	800096a <HAL_RCC_OscConfig+0x4a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800098e:	4313      	orrs	r3, r2
 8000990:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a22      	ldr	r2, [r4, #32]
 8000996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800099a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009a2:	07d8      	lsls	r0, r3, #31
 80009a4:	f100 80f6 	bmi.w	8000b94 <HAL_RCC_OscConfig+0x274>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009a8:	079f      	lsls	r7, r3, #30
 80009aa:	d524      	bpl.n	80009f6 <HAL_RCC_OscConfig+0xd6>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80009ac:	2d04      	cmp	r5, #4
 80009ae:	f000 8176 	beq.w	8000c9e <HAL_RCC_OscConfig+0x37e>
 80009b2:	2d0c      	cmp	r5, #12
 80009b4:	f000 8170 	beq.w	8000c98 <HAL_RCC_OscConfig+0x378>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009b8:	68e3      	ldr	r3, [r4, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 81ad 	beq.w	8000d1a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_ENABLE();
 80009c0:	4b89      	ldr	r3, [pc, #548]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 80009c2:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009c4:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 80009c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009cc:	f7ff fd98 	bl	8000500 <HAL_GetTick>
 80009d0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009d2:	e005      	b.n	80009e0 <HAL_RCC_OscConfig+0xc0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009d4:	f7ff fd94 	bl	8000500 <HAL_GetTick>
 80009d8:	1b40      	subs	r0, r0, r5
 80009da:	2802      	cmp	r0, #2
 80009dc:	f200 8181 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009e0:	6833      	ldr	r3, [r6, #0]
 80009e2:	0558      	lsls	r0, r3, #21
 80009e4:	d5f6      	bpl.n	80009d4 <HAL_RCC_OscConfig+0xb4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	6873      	ldr	r3, [r6, #4]
 80009e8:	6922      	ldr	r2, [r4, #16]
 80009ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80009ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80009f2:	6073      	str	r3, [r6, #4]
 80009f4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009f6:	071a      	lsls	r2, r3, #28
 80009f8:	d525      	bpl.n	8000a46 <HAL_RCC_OscConfig+0x126>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009fa:	6963      	ldr	r3, [r4, #20]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 81a7 	beq.w	8000d50 <HAL_RCC_OscConfig+0x430>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8000a02:	69a3      	ldr	r3, [r4, #24]
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8000a04:	4a78      	ldr	r2, [pc, #480]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 819b 	bne.w	8000d42 <HAL_RCC_OscConfig+0x422>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8000a0c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000a10:	f023 0310 	bic.w	r3, r3, #16
 8000a14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 8000a18:	4b73      	ldr	r3, [pc, #460]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000a1a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a1e:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8000a20:	f042 0201 	orr.w	r2, r2, #1
 8000a24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000a28:	f7ff fd6a 	bl	8000500 <HAL_GetTick>
 8000a2c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a2e:	e005      	b.n	8000a3c <HAL_RCC_OscConfig+0x11c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a30:	f7ff fd66 	bl	8000500 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2807      	cmp	r0, #7
 8000a38:	f200 8153 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a3c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000a40:	079b      	lsls	r3, r3, #30
 8000a42:	d5f5      	bpl.n	8000a30 <HAL_RCC_OscConfig+0x110>
 8000a44:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a46:	075d      	lsls	r5, r3, #29
 8000a48:	d559      	bpl.n	8000afe <HAL_RCC_OscConfig+0x1de>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000a4a:	4b67      	ldr	r3, [pc, #412]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000a4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a4e:	00d0      	lsls	r0, r2, #3
 8000a50:	f100 8161 	bmi.w	8000d16 <HAL_RCC_OscConfig+0x3f6>
      pwrclkchanged = SET;
 8000a54:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a68:	4b60      	ldr	r3, [pc, #384]	; (8000bec <HAL_RCC_OscConfig+0x2cc>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	05d1      	lsls	r1, r2, #23
 8000a6e:	f140 8261 	bpl.w	8000f34 <HAL_RCC_OscConfig+0x614>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8000a72:	68a3      	ldr	r3, [r4, #8]
 8000a74:	07da      	lsls	r2, r3, #31
 8000a76:	f140 8181 	bpl.w	8000d7c <HAL_RCC_OscConfig+0x45c>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8000a7a:	0758      	lsls	r0, r3, #29
 8000a7c:	f140 8210 	bpl.w	8000ea0 <HAL_RCC_OscConfig+0x580>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000a80:	4b59      	ldr	r3, [pc, #356]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000a82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000a86:	f042 0204 	orr.w	r2, r2, #4
 8000a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000a8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000a92:	f042 0201 	orr.w	r2, r2, #1
 8000a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000a9a:	f7ff fd31 	bl	8000500 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000a9e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8000be8 <HAL_RCC_OscConfig+0x2c8>
      tickstart = HAL_GetTick();
 8000aa2:	4607      	mov	r7, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aa4:	f241 3588 	movw	r5, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000aa8:	e005      	b.n	8000ab6 <HAL_RCC_OscConfig+0x196>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fd29 	bl	8000500 <HAL_GetTick>
 8000aae:	1bc0      	subs	r0, r0, r7
 8000ab0:	42a8      	cmp	r0, r5
 8000ab2:	f200 8116 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ab6:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8000aba:	0799      	lsls	r1, r3, #30
 8000abc:	d5f5      	bpl.n	8000aaa <HAL_RCC_OscConfig+0x18a>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8000abe:	68a3      	ldr	r3, [r4, #8]
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8000ac0:	4d49      	ldr	r5, [pc, #292]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8000ac2:	f013 0f80 	tst.w	r3, #128	; 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000ac6:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8000aca:	f000 8295 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x6d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad2:	f8c8 3090 	str.w	r3, [r8, #144]	; 0x90
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8000ada:	e005      	b.n	8000ae8 <HAL_RCC_OscConfig+0x1c8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000adc:	f7ff fd10 	bl	8000500 <HAL_GetTick>
 8000ae0:	1bc0      	subs	r0, r0, r7
 8000ae2:	4540      	cmp	r0, r8
 8000ae4:	f200 80fd 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8000ae8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000aec:	051a      	lsls	r2, r3, #20
 8000aee:	d5f5      	bpl.n	8000adc <HAL_RCC_OscConfig+0x1bc>
    if (pwrclkchanged == SET)
 8000af0:	b126      	cbz	r6, 8000afc <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af2:	4a3d      	ldr	r2, [pc, #244]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000af4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6593      	str	r3, [r2, #88]	; 0x58
 8000afc:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000afe:	069b      	lsls	r3, r3, #26
 8000b00:	d519      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x216>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 81b4 	beq.w	8000e72 <HAL_RCC_OscConfig+0x552>
      __HAL_RCC_HSI48_ENABLE();
 8000b0a:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000b0c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000b10:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8000b12:	f042 0201 	orr.w	r2, r2, #1
 8000b16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000b1a:	f7ff fcf1 	bl	8000500 <HAL_GetTick>
 8000b1e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000b20:	e005      	b.n	8000b2e <HAL_RCC_OscConfig+0x20e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b22:	f7ff fced 	bl	8000500 <HAL_GetTick>
 8000b26:	1b80      	subs	r0, r0, r6
 8000b28:	2802      	cmp	r0, #2
 8000b2a:	f200 80da 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000b2e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000b32:	079f      	lsls	r7, r3, #30
 8000b34:	d5f5      	bpl.n	8000b22 <HAL_RCC_OscConfig+0x202>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000b36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000b38:	b350      	cbz	r0, 8000b90 <HAL_RCC_OscConfig+0x270>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	f002 020c 	and.w	r2, r2, #12
 8000b42:	2a0c      	cmp	r2, #12
 8000b44:	f000 81c2 	beq.w	8000ecc <HAL_RCC_OscConfig+0x5ac>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000b48:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b4a:	681a      	ldr	r2, [r3, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000b4c:	f000 8266 	beq.w	800101c <HAL_RCC_OscConfig+0x6fc>
        __HAL_RCC_PLL_DISABLE();
 8000b50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000b54:	601a      	str	r2, [r3, #0]
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8000b5c:	d103      	bne.n	8000b66 <HAL_RCC_OscConfig+0x246>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	f022 0203 	bic.w	r2, r2, #3
 8000b64:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000b66:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000b68:	68d3      	ldr	r3, [r2, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b6a:	4614      	mov	r4, r2
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000b6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b74:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8000b76:	f7ff fcc3 	bl	8000500 <HAL_GetTick>
 8000b7a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b7c:	e005      	b.n	8000b8a <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b7e:	f7ff fcbf 	bl	8000500 <HAL_GetTick>
 8000b82:	1b40      	subs	r0, r0, r5
 8000b84:	2802      	cmp	r0, #2
 8000b86:	f200 80ac 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	d4f6      	bmi.n	8000b7e <HAL_RCC_OscConfig+0x25e>
  return HAL_OK;
 8000b90:	2000      	movs	r0, #0
 8000b92:	e072      	b.n	8000c7a <HAL_RCC_OscConfig+0x35a>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000b94:	2d08      	cmp	r5, #8
 8000b96:	d075      	beq.n	8000c84 <HAL_RCC_OscConfig+0x364>
 8000b98:	2d0c      	cmp	r5, #12
 8000b9a:	d071      	beq.n	8000c80 <HAL_RCC_OscConfig+0x360>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9c:	6863      	ldr	r3, [r4, #4]
 8000b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba2:	f000 80a4 	beq.w	8000cee <HAL_RCC_OscConfig+0x3ce>
 8000ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000baa:	f000 81ff 	beq.w	8000fac <HAL_RCC_OscConfig+0x68c>
 8000bae:	4f0e      	ldr	r7, [pc, #56]	; (8000be8 <HAL_RCC_OscConfig+0x2c8>)
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bb6:	603a      	str	r2, [r7, #0]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bbe:	603a      	str	r2, [r7, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f040 8099 	bne.w	8000cf8 <HAL_RCC_OscConfig+0x3d8>
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fc9b 	bl	8000500 <HAL_GetTick>
 8000bca:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bcc:	e006      	b.n	8000bdc <HAL_RCC_OscConfig+0x2bc>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bce:	f7ff fc97 	bl	8000500 <HAL_GetTick>
 8000bd2:	eba0 0008 	sub.w	r0, r0, r8
 8000bd6:	2864      	cmp	r0, #100	; 0x64
 8000bd8:	f200 8083 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	039b      	lsls	r3, r3, #14
 8000be0:	d4f5      	bmi.n	8000bce <HAL_RCC_OscConfig+0x2ae>
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	e6e0      	b.n	80009a8 <HAL_RCC_OscConfig+0x88>
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40007000 	.word	0x40007000
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bf0:	2e01      	cmp	r6, #1
 8000bf2:	f47f aeac 	bne.w	800094e <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bf6:	4bb0      	ldr	r3, [pc, #704]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	079b      	lsls	r3, r3, #30
 8000bfc:	d439      	bmi.n	8000c72 <HAL_RCC_OscConfig+0x352>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bfe:	4bae      	ldr	r3, [pc, #696]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000c00:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	0717      	lsls	r7, r2, #28
 8000c08:	bf56      	itet	pl
 8000c0a:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8000c0e:	681b      	ldrmi	r3, [r3, #0]
 8000c10:	091b      	lsrpl	r3, r3, #4
 8000c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c16:	4598      	cmp	r8, r3
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c18:	4fa7      	ldr	r7, [pc, #668]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c1a:	f200 80ea 	bhi.w	8000df2 <HAL_RCC_OscConfig+0x4d2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c2c:	ea43 0308 	orr.w	r3, r3, r8
 8000c30:	603b      	str	r3, [r7, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a22      	ldr	r2, [r4, #32]
 8000c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c3e:	607b      	str	r3, [r7, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	f000 8189 	beq.w	8000f58 <HAL_RCC_OscConfig+0x638>
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8000c46:	f7ff fe15 	bl	8000874 <HAL_RCC_GetSysClockFreq>
 8000c4a:	4b9b      	ldr	r3, [pc, #620]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000c4c:	4a9b      	ldr	r2, [pc, #620]	; (8000ebc <HAL_RCC_OscConfig+0x59c>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 8000c50:	499b      	ldr	r1, [pc, #620]	; (8000ec0 <HAL_RCC_OscConfig+0x5a0>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8000c52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c58:	4a9a      	ldr	r2, [pc, #616]	; (8000ec4 <HAL_RCC_OscConfig+0x5a4>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8000c5a:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8000c5e:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c60:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8000c62:	f7ff fc11 	bl	8000488 <HAL_InitTick>
        if (status != HAL_OK)
 8000c66:	b940      	cbnz	r0, 8000c7a <HAL_RCC_OscConfig+0x35a>
 8000c68:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6a:	07d8      	lsls	r0, r3, #31
 8000c6c:	f57f ae9c 	bpl.w	80009a8 <HAL_RCC_OscConfig+0x88>
 8000c70:	e790      	b.n	8000b94 <HAL_RCC_OscConfig+0x274>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c72:	69e3      	ldr	r3, [r4, #28]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1c2      	bne.n	8000bfe <HAL_RCC_OscConfig+0x2de>
        return HAL_ERROR;
 8000c78:	2001      	movs	r0, #1
}
 8000c7a:	b004      	add	sp, #16
 8000c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c80:	2e03      	cmp	r6, #3
 8000c82:	d18b      	bne.n	8000b9c <HAL_RCC_OscConfig+0x27c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c84:	4a8c      	ldr	r2, [pc, #560]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	0391      	lsls	r1, r2, #14
 8000c8a:	f57f ae8d 	bpl.w	80009a8 <HAL_RCC_OscConfig+0x88>
 8000c8e:	6862      	ldr	r2, [r4, #4]
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f47f ae89 	bne.w	80009a8 <HAL_RCC_OscConfig+0x88>
 8000c96:	e7ef      	b.n	8000c78 <HAL_RCC_OscConfig+0x358>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c98:	2e02      	cmp	r6, #2
 8000c9a:	f47f ae8d 	bne.w	80009b8 <HAL_RCC_OscConfig+0x98>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c9e:	4a86      	ldr	r2, [pc, #536]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	0555      	lsls	r5, r2, #21
 8000ca4:	d502      	bpl.n	8000cac <HAL_RCC_OscConfig+0x38c>
 8000ca6:	68e2      	ldr	r2, [r4, #12]
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d0e5      	beq.n	8000c78 <HAL_RCC_OscConfig+0x358>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4982      	ldr	r1, [pc, #520]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000cae:	6920      	ldr	r0, [r4, #16]
 8000cb0:	684a      	ldr	r2, [r1, #4]
 8000cb2:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000cb6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000cba:	604a      	str	r2, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000cbc:	e69b      	b.n	80009f6 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_MSI_DISABLE();
 8000cbe:	4b7e      	ldr	r3, [pc, #504]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cc2:	4698      	mov	r8, r3
        __HAL_RCC_MSI_DISABLE();
 8000cc4:	f022 0201 	bic.w	r2, r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cca:	f7ff fc19 	bl	8000500 <HAL_GetTick>
 8000cce:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8000cd4:	079b      	lsls	r3, r3, #30
 8000cd6:	d5c7      	bpl.n	8000c68 <HAL_RCC_OscConfig+0x348>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fc12 	bl	8000500 <HAL_GetTick>
 8000cdc:	1bc0      	subs	r0, r0, r7
 8000cde:	2802      	cmp	r0, #2
 8000ce0:	d9f6      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x3b0>
            return HAL_TIMEOUT;
 8000ce2:	2003      	movs	r0, #3
}
 8000ce4:	b004      	add	sp, #16
 8000ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000cea:	2001      	movs	r0, #1
}
 8000cec:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	4a72      	ldr	r2, [pc, #456]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000cf0:	6813      	ldr	r3, [r2, #0]
 8000cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fc02 	bl	8000500 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cfc:	4f6e      	ldr	r7, [pc, #440]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 8000cfe:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d00:	e005      	b.n	8000d0e <HAL_RCC_OscConfig+0x3ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d02:	f7ff fbfd 	bl	8000500 <HAL_GetTick>
 8000d06:	eba0 0008 	sub.w	r0, r0, r8
 8000d0a:	2864      	cmp	r0, #100	; 0x64
 8000d0c:	d8e9      	bhi.n	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	039a      	lsls	r2, r3, #14
 8000d12:	d5f6      	bpl.n	8000d02 <HAL_RCC_OscConfig+0x3e2>
 8000d14:	e765      	b.n	8000be2 <HAL_RCC_OscConfig+0x2c2>
    FlagStatus       pwrclkchanged = RESET;
 8000d16:	2600      	movs	r6, #0
 8000d18:	e6a6      	b.n	8000a68 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8000d1a:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d1e:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8000d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d26:	f7ff fbeb 	bl	8000500 <HAL_GetTick>
 8000d2a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d2c:	e004      	b.n	8000d38 <HAL_RCC_OscConfig+0x418>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2e:	f7ff fbe7 	bl	8000500 <HAL_GetTick>
 8000d32:	1b80      	subs	r0, r0, r6
 8000d34:	2802      	cmp	r0, #2
 8000d36:	d8d4      	bhi.n	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d38:	682b      	ldr	r3, [r5, #0]
 8000d3a:	0559      	lsls	r1, r3, #21
 8000d3c:	d4f7      	bmi.n	8000d2e <HAL_RCC_OscConfig+0x40e>
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	e659      	b.n	80009f6 <HAL_RCC_OscConfig+0xd6>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8000d42:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d4e:	e663      	b.n	8000a18 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_LSI_DISABLE();
 8000d50:	4b59      	ldr	r3, [pc, #356]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000d52:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d56:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000d60:	f7ff fbce 	bl	8000500 <HAL_GetTick>
 8000d64:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d66:	e004      	b.n	8000d72 <HAL_RCC_OscConfig+0x452>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d68:	f7ff fbca 	bl	8000500 <HAL_GetTick>
 8000d6c:	1b80      	subs	r0, r0, r6
 8000d6e:	2807      	cmp	r0, #7
 8000d70:	d8b7      	bhi.n	8000ce2 <HAL_RCC_OscConfig+0x3c2>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d72:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000d76:	079f      	lsls	r7, r3, #30
 8000d78:	d4f6      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x448>
 8000d7a:	e663      	b.n	8000a44 <HAL_RCC_OscConfig+0x124>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d7c:	4d4e      	ldr	r5, [pc, #312]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000d7e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d8a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000d8e:	f022 0204 	bic.w	r2, r2, #4
 8000d92:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f47f ae7f 	bne.w	8000a9a <HAL_RCC_OscConfig+0x17a>
      tickstart = HAL_GetTick();
 8000d9c:	f7ff fbb0 	bl	8000500 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000da4:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000da6:	e005      	b.n	8000db4 <HAL_RCC_OscConfig+0x494>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da8:	f7ff fbaa 	bl	8000500 <HAL_GetTick>
 8000dac:	eba0 0008 	sub.w	r0, r0, r8
 8000db0:	42b8      	cmp	r0, r7
 8000db2:	d896      	bhi.n	8000ce2 <HAL_RCC_OscConfig+0x3c2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000db4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000db8:	0798      	lsls	r0, r3, #30
 8000dba:	d4f5      	bmi.n	8000da8 <HAL_RCC_OscConfig+0x488>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8000dbc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000dc0:	0619      	lsls	r1, r3, #24
 8000dc2:	f57f ae95 	bpl.w	8000af0 <HAL_RCC_OscConfig+0x1d0>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000dc6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8000dca:	4f3b      	ldr	r7, [pc, #236]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dd0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd4:	f241 3588 	movw	r5, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8000dd8:	e006      	b.n	8000de8 <HAL_RCC_OscConfig+0x4c8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dda:	f7ff fb91 	bl	8000500 <HAL_GetTick>
 8000dde:	eba0 0008 	sub.w	r0, r0, r8
 8000de2:	42a8      	cmp	r0, r5
 8000de4:	f63f af7d 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8000de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dec:	051a      	lsls	r2, r3, #20
 8000dee:	d4f4      	bmi.n	8000dda <HAL_RCC_OscConfig+0x4ba>
 8000df0:	e67e      	b.n	8000af0 <HAL_RCC_OscConfig+0x1d0>
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000df4:	00d8      	lsls	r0, r3, #3
 8000df6:	d45b      	bmi.n	8000eb0 <HAL_RCC_OscConfig+0x590>
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 8000e0a:	f7ff fcdf 	bl	80007cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e14:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8000e16:	f430 7000 	bics.w	r0, r0, #512	; 0x200
 8000e1a:	f000 80bd 	beq.w	8000f98 <HAL_RCC_OscConfig+0x678>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8000e1e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8000e22:	f200 813d 	bhi.w	80010a0 <HAL_RCC_OscConfig+0x780>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8000e26:	f000 813f 	beq.w	80010a8 <HAL_RCC_OscConfig+0x788>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if (msirange == RCC_MSIRANGE_7)
 8000e2a:	f1a8 0070 	sub.w	r0, r8, #112	; 0x70
 8000e2e:	fab0 f080 	clz	r0, r0
 8000e32:	0940      	lsrs	r0, r0, #5
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000e34:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <HAL_RCC_OscConfig+0x5a8>)
 8000e36:	6813      	ldr	r3, [r2, #0]
 8000e38:	f023 030f 	bic.w	r3, r3, #15
 8000e3c:	4303      	orrs	r3, r0
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000e40:	6813      	ldr	r3, [r2, #0]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	4298      	cmp	r0, r3
 8000e48:	f47f af16 	bne.w	8000c78 <HAL_RCC_OscConfig+0x358>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	f042 0208 	orr.w	r2, r2, #8
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	6a21      	ldr	r1, [r4, #32]
 8000e66:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000e6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	e6e9      	b.n	8000c46 <HAL_RCC_OscConfig+0x326>
      __HAL_RCC_HSI48_DISABLE();
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000e74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000e78:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      tickstart = HAL_GetTick();
 8000e82:	f7ff fb3d 	bl	8000500 <HAL_GetTick>
 8000e86:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000e88:	e005      	b.n	8000e96 <HAL_RCC_OscConfig+0x576>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e8a:	f7ff fb39 	bl	8000500 <HAL_GetTick>
 8000e8e:	1b80      	subs	r0, r0, r6
 8000e90:	2802      	cmp	r0, #2
 8000e92:	f63f af26 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000e96:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e9a:	0798      	lsls	r0, r3, #30
 8000e9c:	d4f5      	bmi.n	8000e8a <HAL_RCC_OscConfig+0x56a>
 8000e9e:	e64a      	b.n	8000b36 <HAL_RCC_OscConfig+0x216>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000ea0:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <HAL_RCC_OscConfig+0x598>)
 8000ea2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000eae:	e5f4      	b.n	8000a9a <HAL_RCC_OscConfig+0x17a>
    vos = HAL_PWREx_GetVoltageRange();
 8000eb0:	f7ff fc8c 	bl	80007cc <HAL_PWREx_GetVoltageRange>
 8000eb4:	e7af      	b.n	8000e16 <HAL_RCC_OscConfig+0x4f6>
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	08001374 	.word	0x08001374
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	40022000 	.word	0x40022000
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8000ecc:	2801      	cmp	r0, #1
 8000ece:	f43f aed4 	beq.w	8000c7a <HAL_RCC_OscConfig+0x35a>
        pll_config = RCC->PLLCFGR;
 8000ed2:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ed4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ed6:	f003 0103 	and.w	r1, r3, #3
 8000eda:	4291      	cmp	r1, r2
 8000edc:	f47f aecc 	bne.w	8000c78 <HAL_RCC_OscConfig+0x358>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ee2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000ee6:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000eec:	f47f aec4 	bne.w	8000c78 <HAL_RCC_OscConfig+0x358>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ef0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000ef2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ef6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000efa:	f47f aebd 	bne.w	8000c78 <HAL_RCC_OscConfig+0x358>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000efe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000f00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f04:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8000f08:	f47f aeb6 	bne.w	8000c78 <HAL_RCC_OscConfig+0x358>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f0e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000f12:	0852      	lsrs	r2, r2, #1
 8000f14:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000f16:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000f1a:	f47f aead 	bne.w	8000c78 <HAL_RCC_OscConfig+0x358>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000f1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f20:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8000f24:	0852      	lsrs	r2, r2, #1
 8000f26:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f28:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8000f2c:	bf14      	ite	ne
 8000f2e:	2001      	movne	r0, #1
 8000f30:	2000      	moveq	r0, #0
 8000f32:	e6a2      	b.n	8000c7a <HAL_RCC_OscConfig+0x35a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f34:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f36:	461d      	mov	r5, r3
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f3c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fadf 	bl	8000500 <HAL_GetTick>
 8000f42:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	f53f ad93 	bmi.w	8000a72 <HAL_RCC_OscConfig+0x152>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4c:	f7ff fad8 	bl	8000500 <HAL_GetTick>
 8000f50:	1bc0      	subs	r0, r0, r7
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9f6      	bls.n	8000f44 <HAL_RCC_OscConfig+0x624>
 8000f56:	e6c4      	b.n	8000ce2 <HAL_RCC_OscConfig+0x3c2>
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f5a:	00d9      	lsls	r1, r3, #3
 8000f5c:	d53c      	bpl.n	8000fd8 <HAL_RCC_OscConfig+0x6b8>
    vos = HAL_PWREx_GetVoltageRange();
 8000f5e:	f7ff fc35 	bl	80007cc <HAL_PWREx_GetVoltageRange>
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8000f62:	f430 7000 	bics.w	r0, r0, #512	; 0x200
 8000f66:	d02e      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x6a6>
    if (msirange > RCC_MSIRANGE_8)
 8000f68:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8000f6c:	f200 809a 	bhi.w	80010a4 <HAL_RCC_OscConfig+0x784>
      if (msirange == RCC_MSIRANGE_8)
 8000f70:	f000 809c 	beq.w	80010ac <HAL_RCC_OscConfig+0x78c>
      else if (msirange == RCC_MSIRANGE_7)
 8000f74:	f1a8 0070 	sub.w	r0, r8, #112	; 0x70
 8000f78:	fab0 f080 	clz	r0, r0
 8000f7c:	0940      	lsrs	r0, r0, #5
  __HAL_FLASH_SET_LATENCY(latency);
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_RCC_OscConfig+0x790>)
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	f023 030f 	bic.w	r3, r3, #15
 8000f86:	4303      	orrs	r3, r0
 8000f88:	6013      	str	r3, [r2, #0]
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	4298      	cmp	r0, r3
 8000f92:	f47f ae71 	bne.w	8000c78 <HAL_RCC_OscConfig+0x358>
 8000f96:	e656      	b.n	8000c46 <HAL_RCC_OscConfig+0x326>
    if (msirange > RCC_MSIRANGE_8)
 8000f98:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8000f9c:	f67f af4a 	bls.w	8000e34 <HAL_RCC_OscConfig+0x514>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000fa0:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8000fa4:	bf34      	ite	cc
 8000fa6:	2001      	movcc	r0, #1
 8000fa8:	2002      	movcs	r0, #2
 8000faa:	e743      	b.n	8000e34 <HAL_RCC_OscConfig+0x514>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fb0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e698      	b.n	8000cf8 <HAL_RCC_OscConfig+0x3d8>
    if (msirange > RCC_MSIRANGE_8)
 8000fc6:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8000fca:	d9d8      	bls.n	8000f7e <HAL_RCC_OscConfig+0x65e>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000fcc:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8000fd0:	bf34      	ite	cc
 8000fd2:	2001      	movcc	r0, #1
 8000fd4:	2002      	movcs	r0, #2
 8000fd6:	e7d2      	b.n	8000f7e <HAL_RCC_OscConfig+0x65e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	9303      	str	r3, [sp, #12]
 8000fe8:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8000fea:	f7ff fbef 	bl	80007cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ff6:	e7b4      	b.n	8000f62 <HAL_RCC_OscConfig+0x642>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8000ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ffc:	f8c8 3090 	str.w	r3, [r8, #144]	; 0x90
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001000:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001004:	e005      	b.n	8001012 <HAL_RCC_OscConfig+0x6f2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001006:	f7ff fa7b 	bl	8000500 <HAL_GetTick>
 800100a:	1bc0      	subs	r0, r0, r7
 800100c:	4540      	cmp	r0, r8
 800100e:	f63f ae68 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001012:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001016:	051b      	lsls	r3, r3, #20
 8001018:	d4f5      	bmi.n	8001006 <HAL_RCC_OscConfig+0x6e6>
 800101a:	e569      	b.n	8000af0 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_PLL_DISABLE();
 800101c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001020:	601a      	str	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001022:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8001024:	f7ff fa6c 	bl	8000500 <HAL_GetTick>
 8001028:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800102a:	e005      	b.n	8001038 <HAL_RCC_OscConfig+0x718>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102c:	f7ff fa68 	bl	8000500 <HAL_GetTick>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	2802      	cmp	r0, #2
 8001034:	f63f ae55 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	0199      	lsls	r1, r3, #6
 800103c:	d4f6      	bmi.n	800102c <HAL_RCC_OscConfig+0x70c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800103e:	68ea      	ldr	r2, [r5, #12]
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_RCC_OscConfig+0x794>)
 8001042:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001044:	4013      	ands	r3, r2
 8001046:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001048:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800104a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800104c:	430b      	orrs	r3, r1
 800104e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001052:	3801      	subs	r0, #1
 8001054:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8001058:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 800105c:	0849      	lsrs	r1, r1, #1
 800105e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001062:	3901      	subs	r1, #1
 8001064:	0852      	lsrs	r2, r2, #1
 8001066:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800106a:	3a01      	subs	r2, #1
 800106c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001070:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001072:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001074:	4c10      	ldr	r4, [pc, #64]	; (80010b8 <HAL_RCC_OscConfig+0x798>)
        __HAL_RCC_PLL_ENABLE();
 8001076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800107a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800107c:	68eb      	ldr	r3, [r5, #12]
 800107e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001082:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001084:	f7ff fa3c 	bl	8000500 <HAL_GetTick>
 8001088:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800108a:	e005      	b.n	8001098 <HAL_RCC_OscConfig+0x778>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108c:	f7ff fa38 	bl	8000500 <HAL_GetTick>
 8001090:	1b40      	subs	r0, r0, r5
 8001092:	2802      	cmp	r0, #2
 8001094:	f63f ae25 	bhi.w	8000ce2 <HAL_RCC_OscConfig+0x3c2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	019a      	lsls	r2, r3, #6
 800109c:	d5f6      	bpl.n	800108c <HAL_RCC_OscConfig+0x76c>
 800109e:	e577      	b.n	8000b90 <HAL_RCC_OscConfig+0x270>
      latency = FLASH_LATENCY_3; /* 3WS */
 80010a0:	2003      	movs	r0, #3
 80010a2:	e6c7      	b.n	8000e34 <HAL_RCC_OscConfig+0x514>
 80010a4:	2003      	movs	r0, #3
 80010a6:	e76a      	b.n	8000f7e <HAL_RCC_OscConfig+0x65e>
        latency = FLASH_LATENCY_2; /* 2WS */
 80010a8:	2002      	movs	r0, #2
 80010aa:	e6c3      	b.n	8000e34 <HAL_RCC_OscConfig+0x514>
 80010ac:	2002      	movs	r0, #2
 80010ae:	e766      	b.n	8000f7e <HAL_RCC_OscConfig+0x65e>
 80010b0:	40022000 	.word	0x40022000
 80010b4:	019f800c 	.word	0x019f800c
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80010bc:	2800      	cmp	r0, #0
 80010be:	f000 80d5 	beq.w	800126c <HAL_RCC_ClockConfig+0x1b0>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c2:	4a83      	ldr	r2, [pc, #524]	; (80012d0 <HAL_RCC_ClockConfig+0x214>)
{
 80010c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	428b      	cmp	r3, r1
 80010d0:	d20c      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	f023 030f 	bic.w	r3, r3, #15
 80010d8:	430b      	orrs	r3, r1
 80010da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d002      	beq.n	80010ec <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
}
 80010e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ec:	6803      	ldr	r3, [r0, #0]
 80010ee:	4604      	mov	r4, r0
 80010f0:	07da      	lsls	r2, r3, #31
 80010f2:	460d      	mov	r5, r1
 80010f4:	d56d      	bpl.n	80011d2 <HAL_RCC_ClockConfig+0x116>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f6:	6842      	ldr	r2, [r0, #4]
 80010f8:	2a03      	cmp	r2, #3
 80010fa:	d07a      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x136>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fc:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	2a02      	cmp	r2, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001100:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001102:	f000 80b5 	beq.w	8001270 <HAL_RCC_ClockConfig+0x1b4>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001106:	2a00      	cmp	r2, #0
 8001108:	f040 80b6 	bne.w	8001278 <HAL_RCC_ClockConfig+0x1bc>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800110c:	079e      	lsls	r6, r3, #30
 800110e:	d5ea      	bpl.n	80010e6 <HAL_RCC_ClockConfig+0x2a>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001110:	f7ff fbb0 	bl	8000874 <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 8001114:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <HAL_RCC_ClockConfig+0x21c>)
 8001116:	4298      	cmp	r0, r3
 8001118:	f200 80b2 	bhi.w	8001280 <HAL_RCC_ClockConfig+0x1c4>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800111c:	f04f 0800 	mov.w	r8, #0
 8001120:	6862      	ldr	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001122:	4e6c      	ldr	r6, [pc, #432]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001124:	f241 3988 	movw	r9, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001128:	68b3      	ldr	r3, [r6, #8]
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	431a      	orrs	r2, r3
 8001130:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8001132:	f7ff f9e5 	bl	8000500 <HAL_GetTick>
 8001136:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001138:	e005      	b.n	8001146 <HAL_RCC_ClockConfig+0x8a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113a:	f7ff f9e1 	bl	8000500 <HAL_GetTick>
 800113e:	1bc0      	subs	r0, r0, r7
 8001140:	4548      	cmp	r0, r9
 8001142:	f200 80a8 	bhi.w	8001296 <HAL_RCC_ClockConfig+0x1da>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	68b3      	ldr	r3, [r6, #8]
 8001148:	6862      	ldr	r2, [r4, #4]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001152:	d1f2      	bne.n	800113a <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	0799      	lsls	r1, r3, #30
 8001158:	d43d      	bmi.n	80011d6 <HAL_RCC_ClockConfig+0x11a>
    if (hpre == RCC_SYSCLK_DIV2)
 800115a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800115e:	d103      	bne.n	8001168 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001160:	68b2      	ldr	r2, [r6, #8]
 8001162:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001166:	60b2      	str	r2, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001168:	4959      	ldr	r1, [pc, #356]	; (80012d0 <HAL_RCC_ClockConfig+0x214>)
 800116a:	680a      	ldr	r2, [r1, #0]
 800116c:	f002 020f 	and.w	r2, r2, #15
 8001170:	42aa      	cmp	r2, r5
 8001172:	d909      	bls.n	8001188 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001174:	680a      	ldr	r2, [r1, #0]
 8001176:	f022 020f 	bic.w	r2, r2, #15
 800117a:	432a      	orrs	r2, r5
 800117c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	680a      	ldr	r2, [r1, #0]
 8001180:	f002 020f 	and.w	r2, r2, #15
 8001184:	42aa      	cmp	r2, r5
 8001186:	d1ae      	bne.n	80010e6 <HAL_RCC_ClockConfig+0x2a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	075a      	lsls	r2, r3, #29
 800118a:	d506      	bpl.n	800119a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800118c:	4951      	ldr	r1, [pc, #324]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
 800118e:	68e0      	ldr	r0, [r4, #12]
 8001190:	688a      	ldr	r2, [r1, #8]
 8001192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001196:	4302      	orrs	r2, r0
 8001198:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119a:	071b      	lsls	r3, r3, #28
 800119c:	d507      	bpl.n	80011ae <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
 80011a0:	6921      	ldr	r1, [r4, #16]
 80011a2:	6893      	ldr	r3, [r2, #8]
 80011a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011ac:	6093      	str	r3, [r2, #8]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80011ae:	f7ff fb61 	bl	8000874 <HAL_RCC_GetSysClockFreq>
 80011b2:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <HAL_RCC_ClockConfig+0x220>)
 80011b6:	689b      	ldr	r3, [r3, #8]
  return HAL_InitTick(uwTickPrio);
 80011b8:	4949      	ldr	r1, [pc, #292]	; (80012e0 <HAL_RCC_ClockConfig+0x224>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80011ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011be:	5cd3      	ldrb	r3, [r2, r3]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_RCC_ClockConfig+0x228>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80011c2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011c6:	6013      	str	r3, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 80011c8:	6808      	ldr	r0, [r1, #0]
}
 80011ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80011ce:	f7ff b95b 	b.w	8000488 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d2:	079f      	lsls	r7, r3, #30
 80011d4:	d5c8      	bpl.n	8001168 <HAL_RCC_ClockConfig+0xac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d6:	493f      	ldr	r1, [pc, #252]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
 80011d8:	68a0      	ldr	r0, [r4, #8]
 80011da:	688a      	ldr	r2, [r1, #8]
 80011dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011e0:	4302      	orrs	r2, r0
 80011e2:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	493a      	ldr	r1, [pc, #232]	; (80012d0 <HAL_RCC_ClockConfig+0x214>)
 80011e6:	680a      	ldr	r2, [r1, #0]
 80011e8:	f002 020f 	and.w	r2, r2, #15
 80011ec:	42aa      	cmp	r2, r5
 80011ee:	d8c1      	bhi.n	8001174 <HAL_RCC_ClockConfig+0xb8>
 80011f0:	e7ca      	b.n	8001188 <HAL_RCC_ClockConfig+0xcc>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011f2:	4938      	ldr	r1, [pc, #224]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
 80011f4:	6808      	ldr	r0, [r1, #0]
 80011f6:	0186      	lsls	r6, r0, #6
 80011f8:	f57f af75 	bpl.w	80010e6 <HAL_RCC_ClockConfig+0x2a>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80011fc:	68c8      	ldr	r0, [r1, #12]
 80011fe:	f000 0003 	and.w	r0, r0, #3
 8001202:	2801      	cmp	r0, #1
 8001204:	d055      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x1f6>
  uint32_t msirange = 0U;
 8001206:	2100      	movs	r1, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001208:	4f32      	ldr	r7, [pc, #200]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
 800120a:	68fe      	ldr	r6, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800120c:	68f8      	ldr	r0, [r7, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800120e:	f006 0603 	and.w	r6, r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001212:	f3c0 1003 	ubfx	r0, r0, #4, #4

  switch (pllsource)
 8001216:	2e02      	cmp	r6, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001218:	f100 0001 	add.w	r0, r0, #1
  switch (pllsource)
 800121c:	d03d      	beq.n	800129a <HAL_RCC_ClockConfig+0x1de>
 800121e:	2e03      	cmp	r6, #3
 8001220:	d03b      	beq.n	800129a <HAL_RCC_ClockConfig+0x1de>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001222:	fbb1 f1f0 	udiv	r1, r1, r0
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800122c:	fb01 f100 	mul.w	r1, r1, r0
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001230:	4e28      	ldr	r6, [pc, #160]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
      if (pllfreq > 80000000U)
 8001232:	4f29      	ldr	r7, [pc, #164]	; (80012d8 <HAL_RCC_ClockConfig+0x21c>)
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001234:	68f0      	ldr	r0, [r6, #12]
 8001236:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800123a:	3001      	adds	r0, #1
 800123c:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco / pllr;
 800123e:	fbb1 f1f0 	udiv	r1, r1, r0
      if (pllfreq > 80000000U)
 8001242:	42b9      	cmp	r1, r7
 8001244:	d932      	bls.n	80012ac <HAL_RCC_ClockConfig+0x1f0>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001246:	68b1      	ldr	r1, [r6, #8]
 8001248:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800124c:	d005      	beq.n	800125a <HAL_RCC_ClockConfig+0x19e>
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800124e:	f013 0802 	ands.w	r8, r3, #2
 8001252:	f43f af66 	beq.w	8001122 <HAL_RCC_ClockConfig+0x66>
 8001256:	68a3      	ldr	r3, [r4, #8]
 8001258:	bb43      	cbnz	r3, 80012ac <HAL_RCC_ClockConfig+0x1f0>
          hpre = RCC_SYSCLK_DIV2;
 800125a:	f04f 0880 	mov.w	r8, #128	; 0x80
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800125e:	68b3      	ldr	r3, [r6, #8]
 8001260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001264:	ea43 0308 	orr.w	r3, r3, r8
 8001268:	60b3      	str	r3, [r6, #8]
 800126a:	e75a      	b.n	8001122 <HAL_RCC_ClockConfig+0x66>
    return HAL_ERROR;
 800126c:	2001      	movs	r0, #1
}
 800126e:	4770      	bx	lr
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001270:	039f      	lsls	r7, r3, #14
 8001272:	f53f af4d 	bmi.w	8001110 <HAL_RCC_ClockConfig+0x54>
 8001276:	e736      	b.n	80010e6 <HAL_RCC_ClockConfig+0x2a>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001278:	0558      	lsls	r0, r3, #21
 800127a:	f57f af34 	bpl.w	80010e6 <HAL_RCC_ClockConfig+0x2a>
 800127e:	e747      	b.n	8001110 <HAL_RCC_ClockConfig+0x54>
        hpre = RCC_SYSCLK_DIV2;
 8001280:	f04f 0880 	mov.w	r8, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <HAL_RCC_ClockConfig+0x218>)
 8001286:	6893      	ldr	r3, [r2, #8]
 8001288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800128c:	ea43 0308 	orr.w	r3, r3, r8
 8001290:	6093      	str	r3, [r2, #8]
 8001292:	6862      	ldr	r2, [r4, #4]
 8001294:	e745      	b.n	8001122 <HAL_RCC_ClockConfig+0x66>
        return HAL_TIMEOUT;
 8001296:	2003      	movs	r0, #3
 8001298:	e726      	b.n	80010e8 <HAL_RCC_ClockConfig+0x2c>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800129a:	4913      	ldr	r1, [pc, #76]	; (80012e8 <HAL_RCC_ClockConfig+0x22c>)
 800129c:	68fe      	ldr	r6, [r7, #12]
 800129e:	fbb1 f1f0 	udiv	r1, r1, r0
 80012a2:	f3c6 2006 	ubfx	r0, r6, #8, #7
 80012a6:	fb01 f100 	mul.w	r1, r1, r0
 80012aa:	e7c1      	b.n	8001230 <HAL_RCC_ClockConfig+0x174>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80012ac:	f04f 0800 	mov.w	r8, #0
 80012b0:	e737      	b.n	8001122 <HAL_RCC_ClockConfig+0x66>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80012b2:	6808      	ldr	r0, [r1, #0]
 80012b4:	0700      	lsls	r0, r0, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80012b6:	bf54      	ite	pl
 80012b8:	f8d1 1094 	ldrpl.w	r1, [r1, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012bc:	6809      	ldrmi	r1, [r1, #0]
    msirange = MSIRangeTable[msirange];
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <HAL_RCC_ClockConfig+0x230>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80012c0:	bf54      	ite	pl
 80012c2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80012c6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80012ca:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80012ce:	e79b      	b.n	8001208 <HAL_RCC_ClockConfig+0x14c>
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40021000 	.word	0x40021000
 80012d8:	04c4b400 	.word	0x04c4b400
 80012dc:	08001374 	.word	0x08001374
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000000 	.word	0x20000000
 80012e8:	00f42400 	.word	0x00f42400
 80012ec:	08001384 	.word	0x08001384

080012f0 <__libc_init_array>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	4e0d      	ldr	r6, [pc, #52]	; (8001328 <__libc_init_array+0x38>)
 80012f4:	2500      	movs	r5, #0
 80012f6:	4c0d      	ldr	r4, [pc, #52]	; (800132c <__libc_init_array+0x3c>)
 80012f8:	1ba4      	subs	r4, r4, r6
 80012fa:	10a4      	asrs	r4, r4, #2
 80012fc:	42a5      	cmp	r5, r4
 80012fe:	d109      	bne.n	8001314 <__libc_init_array+0x24>
 8001300:	4e0b      	ldr	r6, [pc, #44]	; (8001330 <__libc_init_array+0x40>)
 8001302:	2500      	movs	r5, #0
 8001304:	4c0b      	ldr	r4, [pc, #44]	; (8001334 <__libc_init_array+0x44>)
 8001306:	f000 f81f 	bl	8001348 <_init>
 800130a:	1ba4      	subs	r4, r4, r6
 800130c:	10a4      	asrs	r4, r4, #2
 800130e:	42a5      	cmp	r5, r4
 8001310:	d105      	bne.n	800131e <__libc_init_array+0x2e>
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001318:	3501      	adds	r5, #1
 800131a:	4798      	blx	r3
 800131c:	e7ee      	b.n	80012fc <__libc_init_array+0xc>
 800131e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001322:	3501      	adds	r5, #1
 8001324:	4798      	blx	r3
 8001326:	e7f2      	b.n	800130e <__libc_init_array+0x1e>
 8001328:	080013c8 	.word	0x080013c8
 800132c:	080013c8 	.word	0x080013c8
 8001330:	080013c8 	.word	0x080013c8
 8001334:	080013cc 	.word	0x080013cc

08001338 <memset>:
 8001338:	4402      	add	r2, r0
 800133a:	4603      	mov	r3, r0
 800133c:	4293      	cmp	r3, r2
 800133e:	d100      	bne.n	8001342 <memset+0xa>
 8001340:	4770      	bx	lr
 8001342:	f803 1b01 	strb.w	r1, [r3], #1
 8001346:	e7f9      	b.n	800133c <memset+0x4>

08001348 <_init>:
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	bf00      	nop
 800134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134e:	bc08      	pop	{r3}
 8001350:	469e      	mov	lr, r3
 8001352:	4770      	bx	lr

08001354 <_fini>:
 8001354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001356:	bf00      	nop
 8001358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135a:	bc08      	pop	{r3}
 800135c:	469e      	mov	lr, r3
 800135e:	4770      	bx	lr
